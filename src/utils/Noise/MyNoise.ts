import MathUtils from "@utils/MathUtils"

class MyNoise {
  
  // static arr = [94,91,95,97,90,86,89,98,99,90,84,93,90,80,85,77,78,81,80,85,87,96,90,92,84,77,71,81,85,93,85,90,96,89,79,83,75,76,86,78,72,70,79,89,94,85,90,84,74,80,71,78,79,84,76,74,77,76,85,91,98,96,89,93,93,90,100,93,85,95,91,94,88,82,73,74,67,64,61,70,64,58,53,59,66,72,67,59,49,42,37,33,34,29,21,31,40,39,38,36,27,24,27,21,12,17,19,23,29,33,23,15,25,15,19,27,34,42,47,56,50,57,65,71,61,65,59,49,52,42,32,37,45,37,36,29,26,23,18,10,9,4,11,6,1,10,9,16,19,22,12,19,19,17,17,19,17,25,30,28,35,30,26,18,25,35,26,23,29,24,32,27,28,35,32,28,38,29,32,30,23,20,10,20,11,6,14,22,20,30,22,29,32,31,38,47,39,29,21,27,34,38,40,45,36,43,41,40,45,55,56,61,64,67,62,57,66,76,71,70,60,54,60,58,62,64,70,76,80,78,88,96,94,91,87,84,82,75,73,64,64,66,71,80,84,74,80,83,74,71,80,79,81,75,75,75,74,68,65,59,58,55,45,55,62,72,63,61,51,46,49,45,41,38,36,38,40,49,42,41,47,42,34,35,37,34,43,51,56,50,40,41,35,26,19,9,8,12,21,20,14,15,8,13,23,27,33,24,31,21,20,21,13,9,7,1,3,6,8,4,2,10,12,20,24,23,25,16,6,16,23,31,28,29,22,22,28,25,15,5,2,10,15,25,16,12,15,9,6,9,2,9,8,18,26,32,24,17,11,16,6,11,18,9,13,8,0,5,11,21,18,13,20,22,19,21,22,22,28,38,34,39,32,24,15,12,21,22,12,8,6,3,12,4,7,15,14,8,5,8,12,22,31,41,36,29,22,14,20,14,15,6,10,16,24,21,12,11,19,26,17,20,27,32,39,38,28,24,24,27,19,26,23,29,26,20,11,15,13,5,14,13,19,17,23,29,30,25,16,19,12,10,5,4,14,17,19,23,31,33,42,48,53,62,54,55,65,63,70,76,86,82,82,84,83,89,81,71,75,66,75,79,83,87,94,90,85,77,81,72,72,81,81,74,67,77,75,79,69,60,54,56,62,57,60,56,61,69,76,80,72,72,77,86,93,88,78,78,80,77,83,73,70,74,64,59,64,68,78,85,94,100,99,97,100,97,88,85,80,70,77,69,62,60,50,51,60,64,56,53,56,54,57,59,54,61,53,48,42,46,54,59,58,61,68,72,63,58,52,56,62,70,66,74,70,67,59,56,50,48,54,59,67,59,58,54,55,56,58,53,56,56,59,59,63,66,70,60,66,60,64,59,55,51,48,40,41,51,51,47,53,53,56,62,66,59,64,58,62,71,61,53,47,39,30,36,32,35,37,46,51,54,53,49,53,52,43,53,55,51,60,61,69,66,58,68,66,75,75,83,89,91,86,87,96,87,78,83,81,76,84,90,82,73,70,68,64,66,67,70,65,66,75,65,69,79,86,81,73,68,69,69,71,73,68,71,70,77,70,74,78,86,95,91,89,93,84,87,77,70,72,67,71,70,68,71,63,64,54,53,61,62,72,68,62,70,67,76,83,85,92,96,93,100,97,99,99,99,91,91,87,81,76,74,72,65,60,60,69,74,72,70,78,77,71,77,82,90,82,91,91,96,90,95,96,92,84,80,72,72,65,62,56,50,58,60,55,51,59,54,46,39,34,35,32,23,15,5,3,0,10,3,1,5,5,8,12,19,29,39,39,38,34,36,26,17,8,18,27,18,22,27,26,19,13,17,12,5,4,7,17,16,25,17,14,19,10,11,4,1,0,7,10,16,23,15,14,23,15,11,18,21,22,14,6,14,5,3,9,15,10,1,6,13,11,14,8,10,12,5,3,0,6,15,11,21,31,34,34,32,37,32,36,41,37,28,25,25,17,22,25,21,11,14,23,16,9,13,3,8,6,1,10,11,10,12,5,3,6,3,0,1,11,17,27,30,25,34,38,47,41,49,39,39,39,34,40,44,34,44,41,32,22,18,25,27,22,25,21,29,31,21,11,3,10,3,7,11,1,3,11,12,5,1,7,11,14,14,12,12,9,11,17,26,23,28,38,34,30,31,31,21,29,21,26,32,29,36,36,38,36,42,42,49,45,44,42,41,39,32,39,34,34,44,48,42,46,36,32,36,27,37,37,32,36,37,42,48,50,45,38,35,36,35,40,46,43,43,43,94]
  static arr = [50, 55, 58, 56, 53, 52, 47, 47, 44, 48, 44, 40, 39, 35, 40, 43, 46, 50].slice(0, 5)
  // .slice(150, 180)
  static dispersion = .1

  static regenerate() {
    this.arr = []
    for (let i = 0 ; i < 20 ; i++) {
      let min = 0
      let max = 100
      if (i > 0) {
        min = this.arr[i - 1] - this.dispersion * 100
        max = this.arr[i - 1] + this.dispersion * 100
      }
      if (min < 0) min = 0
      if (max > 100) max = 100
      this.arr.push(MathUtils.random(min, max))
    }
  }

  static noise(n: number) :number {
    n = n%1
    let indexFound = this.mapRange(n, 0, 1, 0, this.arr.length)
    let t = indexFound - Math.floor(indexFound)

    let p0 = this.arr[Math.floor(indexFound) - 1];
    let p1 = this.arr[Math.floor(indexFound)];
    let p2 = this.arr[Math.ceil(indexFound)];
    let p3 = this.arr[Math.ceil(indexFound) + 1];

    console.log("index found", n, indexFound)
    console.table([
      { index: Math.floor(indexFound) - 1, value: p0},
      { index: Math.floor(indexFound), value: p1},
      { index: Math.ceil(indexFound), value: p2},
      { index: Math.ceil(indexFound) + 1, value: p3},
    ])


    let value = 
      p0 * (Math.pow(t, 3) * -1 + Math.pow(t, 2) * 3 - 3 * t + 1) +
      p1 * (Math.pow(t, 3) * 3 - Math.pow(t, 2) * 6 + 3 * t) +
      p2 * (Math.pow(t, 3) * -3 + Math.pow(t, 2) * 3) +
      p3 * (Math.pow(t, 3))

    
    let lerp1 = this.lerp(t, p0, p1)
    let lerp2 = this.lerp(t, p1, p2)
    let lerp3 = this.lerp(t, p2, p3)

    let lerp2_1 = this.lerp(t, lerp1, lerp2)
    let lerp2_2 = this.lerp(t, lerp2, lerp3)

    let lerp3_1 = this.lerp(t, lerp2_1, lerp2_2)

    console.table({entry: n, lerp1, lerp2, lerp3, lerp2_1, lerp2_2, lerp3_1})

    return value;

    // return lerp3_1
  }

  static lerp(t: number, p0: number, p1: number) {
    return (1 - t) * p0 + t * p1;
  }

  static mapRange(x: number, fromMin: number, fromMax: number, toMin: number, toMax: number) {
    return toMin + (toMax - toMin) / (fromMax - fromMin) * (x - fromMin)
  } 

}

export default MyNoise